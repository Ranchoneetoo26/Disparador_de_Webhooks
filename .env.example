# --- BANCO DE DADOS DE DESENVOLVIMENTO ---
# Host do banco de dados (ex: localhost)
DB_HOST=localhost
# Usuário de conexão com o banco
DB_USERNAME=postgres
# Senha do usuário do banco
DB_PASSWORD=postgres
# Nome do banco de dados de desenvolvimento
DB_DATABASE=disparador_test
# Dialeto do banco (postgres, mysql, etc.)
DB_DIALECT=postgres
# Porta de conexão com o banco
DB_PORT=5433

# --- BANCO DE DADOS DE TESTE ---
# Usado especificamente para rodar os testes automatizados
DB_HOST_TEST=localhost
DB_USERNAME_TEST=postgres
DB_PASSWORD_TEST=
DB_DATABASE_TEST=
DB_DIALECT_TEST=postgres
DB_PORT_TEST=5433
NODE_ENV=test

import express from 'express';
import createAuthMiddleware from '../middlewares/AuthMiddleware.js';
import SequelizeCedenteRepository from '../../../database/sequelize/repositories/SequelizeCedenteRepository.js';
import SequelizeSoftwareHouseRepository from '../../../database/sequelize/repositories/SequelizeSoftwareHouseRepository.js';
import WebhookController from '../controllers/WebhookController.js';
import pg from 'pg';

const router = express.Router();

let cedenteRepository;
let softwareHouseRepository;
try {
  cedenteRepository = new SequelizeCedenteRepository();
} catch (e) {
  cedenteRepository = SequelizeCedenteRepository;
}

try {
  softwareHouseRepository = new SequelizeSoftwareHouseRepository();
} catch (e) {
  softwareHouseRepository = SequelizeSoftwareHouseRepository;
}

const authMiddleware = createAuthMiddleware({ cedenteRepository, softwareHouseRepository });
router.use(authMiddleware);

const safeHandler = (ctrl, method) => {
  if (!ctrl) return (req, res) => res.status(204).end();
  const fn = ctrl[method] || ctrl;
  if (typeof fn === 'function') return fn.bind(ctrl);
  return (req, res) => res.status(204).end();
};

router.post('/', safeHandler(WebhookController, 'create'));
router.get('/', safeHandler(WebhookController, 'list'));

export default router;

function createAuthMiddleware({ cedenteRepository, softwareHouseRepository } = {}) {
  if (!cedenteRepository || !softwareHouseRepository) {
    throw new Error('cedenteRepository and softwareHouseRepository are required to create auth middleware');
  }

  const tryFindByCnpjAndToken = async (repo, cnpj, token) => {
    // ...existing code...
  };

  return async function authMiddleware(req, res, next) {
    // ...existing code...
  };
}

export default createAuthMiddleware;

function _normalizeConfigValue(value) {
  // ...existing code...
}

function resolveNotificationConfig({ conta, cedente, defaultConfig = { retries: 3, timeout: 5000 } } = {}) {
  // ...existing code...
}

export { resolveNotificationConfig };
export default resolveNotificationConfig;

const config = {
  development: {
    username: process.env.DB_USERNAME || 'postgres',
    password: process.env.DB_PASSWORD || 'postgres',
    database: process.env.DB_DATABASE || 'disparador_test',
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT_TEST || 5433,
    dialect: 'postgres',
    dialectModule: pg
  },
  test: {
    username: process.env.DB_USERNAME || 'postgres',
    password: process.env.DB_PASSWORD || 'postgres',
    database: process.env.DB_DATABASE || 'disparador_test',
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT_TEST || 5433,
    dialect: 'postgres',
    dialectModule: pg,
    logging: false
  }
};

export default config;