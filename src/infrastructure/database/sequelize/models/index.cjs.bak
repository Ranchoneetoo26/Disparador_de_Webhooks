// src/infrastructure/database/sequelize/models/index.cjs
'use strict';

const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const { Sequelize, DataTypes } = require('sequelize');

// Carrega .env do root do projeto (garante que variáveis estejam disponíveis)
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

// Detecta ambiente de teste (Jest define JEST_WORKER_ID)
const isTest = process.env.NODE_ENV === 'test' || !!process.env.JEST_WORKER_ID;

// Usa variáveis de teste quando apropriado
const DB_DATABASE = isTest ? process.env.DB_DATABASE_TEST : process.env.DB_DATABASE;
const DB_USERNAME = isTest ? process.env.DB_USERNAME_TEST : process.env.DB_USERNAME;
const DB_PASSWORD = isTest ? process.env.DB_PASSWORD_TEST : process.env.DB_PASSWORD;
const DB_HOST     = isTest ? process.env.DB_HOST_TEST     : process.env.DB_HOST;
const DB_PORT     = isTest ? process.env.DB_PORT_TEST     : process.env.DB_PORT;
const DB_DIALECT  = isTest ? process.env.DB_DIALECT_TEST  : process.env.DB_DIALECT;

// Log útil para debug local (pode comentar se quiser)
if (!DB_DATABASE || !DB_USERNAME || !DB_HOST || !DB_PORT || !DB_DIALECT) {
  console.error('Erro Fatal: Variáveis de ambiente do banco de dados não estão configuradas corretamente. Verifique seu .env');
}

// Cria instância do Sequelize com opções explícitas (inclui dialect)
const sequelize = new Sequelize(DB_DATABASE, DB_USERNAME, DB_PASSWORD, {
  host: DB_HOST || '127.0.0.1',
  port: DB_PORT ? Number(DB_PORT) : undefined,
  dialect: DB_DIALECT || 'postgres',
  logging: false,
  define: {
    underscored: true,
    timestamps: false
  }
});

const db = {};
const basename = path.basename(__filename);
const modelsDir = __dirname; // assume models na mesma pasta

// Carrega todos os models do diretório atual (exceto este arquivo)
fs
  .readdirSync(modelsDir)
  .filter(file => {
    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js' || file.slice(-4) === '.cjs');
  })
  .forEach(file => {
    const modelPath = path.join(modelsDir, file);
    // alguns projects exportam factory (sequelize, DataTypes) ou uma classe
    const modelImport = require(modelPath);
    const model = (typeof modelImport === 'function')
      ? modelImport(sequelize, DataTypes)
      : (modelImport.default ? modelImport.default(sequelize, DataTypes) : modelImport(sequelize, DataTypes));
    db[model.name] = model;
  });

// Executa associações se existirem
Object.keys(db).forEach(modelName => {
  if (db[modelName] && typeof db[modelName].associate === 'function') {
    db[modelName].associate(db);
  }
});


db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;
